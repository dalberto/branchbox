#!/bin/bash

# Smart Port Assignment Logic for BranchBox
# Uses deterministic but spread-out port assignment to minimize conflicts

set -e

# Calculate deterministic hash from worktree name
get_worktree_hash() {
    local worktree_name=$1
    # Use md5sum for cross-platform compatibility, take first 2 hex digits
    echo "$worktree_name" | md5sum | cut -c1-2
}

# Calculate base port offset for a worktree
get_base_offset() {
    local worktree_name=$1
    local worktree_hash=$(get_worktree_hash "$worktree_name")
    # Convert hex to decimal and mod 100 for offset range 0-99
    echo $((0x$worktree_hash % 100))
}

# Calculate assigned port for a service in a worktree
calculate_assigned_port() {
    local original_port=$1
    local worktree_name=$2
    local service_offset=${3:-0}  # Additional offset per service
    
    local base_offset=$(get_base_offset "$worktree_name")
    local assigned_port=$((original_port + base_offset + service_offset))
    
    echo "$assigned_port"
}

# Generate port assignments for all services with conflicts
generate_port_assignments() {
    local worktree_name=$1
    local compose_file=${2:-"docker-compose.yml"}
    
    if [ ! -f "$compose_file" ]; then
        echo "Error: Compose file not found: $compose_file" >&2
        return 1
    fi
    
    # Source the parser functions
    local script_dir=$(dirname "${BASH_SOURCE[0]}")
    source "$script_dir/docker-compose-parser.sh"
    
    local service_offset=0
    local services=$(get_services_with_hardcoded_ports "$compose_file")
    
    if [ -z "$services" ]; then
        return 0  # No services with hardcoded ports
    fi
    
    # Process each service with hardcoded ports
    while IFS= read -r service; do
        # Extract port mappings specifically for this service using awk
        local ports=$(awk -v service="$service" '
            /^services:/ { in_services = 1; next }
            /^[a-zA-Z]/ && !/^services:/ { in_services = 0; next }
            !in_services { next }
            $0 ~ "^[[:space:]]{2}" service ":" { current_service = service; in_ports = 0; next }
            current_service == service && /^[[:space:]]{4}ports:/ { in_ports = 1; next }
            current_service == service && in_ports && /^[[:space:]]{6}-[[:space:]]*"?[0-9]+:[0-9]+"?/ {
                gsub(/^[[:space:]]*-[[:space:]]*"?/, "")
                gsub(/"?[[:space:]]*$/, "")
                print $0
                next
            }
            current_service == service && /^[[:space:]]{4}[a-zA-Z]/ && !/^[[:space:]]{4}ports:/ { in_ports = 0 }
            /^[[:space:]]{2}[a-zA-Z]/ && current_service { current_service = ""; in_ports = 0 }
        ' "$compose_file")
        
        # Generate new port mappings for this service
        while IFS= read -r port_mapping; do
            if [ -n "$port_mapping" ]; then
                local host_port=$(echo "$port_mapping" | cut -d':' -f1)
                local container_port=$(echo "$port_mapping" | cut -d':' -f2)
                local new_host_port=$(calculate_assigned_port "$host_port" "$worktree_name" "$service_offset")
                
                echo "$service:$host_port:$container_port:$new_host_port"
                service_offset=$((service_offset + 1))
            fi
        done <<< "$ports"
        
    done <<< "$services"
}

# Generate docker-compose.override.yml content
generate_override_content() {
    local worktree_name=$1
    local compose_file=${2:-"docker-compose.yml"}
    
    echo "# Auto-generated docker-compose.override.yml for worktree: $worktree_name"
    echo "# Generated by BranchBox Port Doctor on $(date)"
    echo "# This file resolves port conflicts between worktrees"
    echo ""
    echo "services:"
    
    local assignments=$(generate_port_assignments "$worktree_name" "$compose_file")
    local current_service=""
    
    if [ -z "$assignments" ]; then
        echo "  # No port conflicts detected - no overrides needed"
        return 0
    fi
    
    # Group assignments by service
    while IFS=':' read -r service host_port container_port new_host_port; do
        if [ "$service" != "$current_service" ]; then
            if [ -n "$current_service" ]; then
                echo ""  # Blank line between services
            fi
            echo "  $service:"
            echo "    ports: !override"
            current_service="$service"
        fi
        echo "      - \"$new_host_port:$container_port\""
    done <<< "$assignments"
}

# Preview port assignments without creating files
preview_assignments() {
    local worktree_name=$1
    local compose_file=${2:-"docker-compose.yml"}
    
    echo "Port assignments for worktree: $worktree_name"
    echo "Base offset: $(get_base_offset "$worktree_name")"
    echo ""
    
    local assignments=$(generate_port_assignments "$worktree_name" "$compose_file")
    
    if [ -z "$assignments" ]; then
        echo "No port conflicts detected - no assignments needed"
        return 0
    fi
    
    echo "Service port mappings:"
    while IFS=':' read -r service host_port container_port new_host_port; do
        echo "  $service: $host_port:$container_port -> $new_host_port:$container_port"
    done <<< "$assignments"
}

# Get the port range for a given port (for user display)
get_port_range_display() {
    local port=$1
    
    case "$port" in
        80[0-9][0-9])   echo "8xxx (web services)" ;;
        30[0-9][0-9])   echo "3xxx (frontend)" ;;  
        50[0-9][0-9])   echo "5xxx (database)" ;;
        60[0-9][0-9])   echo "6xxx (cache)" ;;
        90[0-9][0-9])   echo "9xxx (monitoring)" ;;
        *)              echo "${port%??}xx (${port}-$((port + 99)))" ;;
    esac
}

# Main function for CLI usage
main() {
    local worktree_name=$1
    local action=${2:-"preview"}
    local compose_file=${3:-"docker-compose.yml"}
    
    if [ -z "$worktree_name" ]; then
        echo "Usage: $0 <worktree-name> [preview|generate|assignments] [compose-file]"
        echo ""
        echo "Actions:"
        echo "  preview     - Show port assignments without creating files (default)"
        echo "  generate    - Generate docker-compose.override.yml content"
        echo "  assignments - Show raw port assignments data"
        echo ""
        echo "Examples:"
        echo "  $0 feature-auth preview"
        echo "  $0 main generate docker-compose.yml"
        exit 1
    fi
    
    case "$action" in
        preview)
            preview_assignments "$worktree_name" "$compose_file"
            ;;
        generate)
            generate_override_content "$worktree_name" "$compose_file"
            ;;
        assignments)
            generate_port_assignments "$worktree_name" "$compose_file"
            ;;
        *)
            echo "Unknown action: $action"
            echo "Use: preview, generate, or assignments"
            exit 1
            ;;
    esac
}

# Run main function if script is executed directly
if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    main "$@"
fi