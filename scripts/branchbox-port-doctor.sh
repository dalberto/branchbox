#!/bin/bash

# BranchBox Port Doctor - Auto-resolution of Docker port conflicts
# Main orchestration script for port conflict detection and resolution

set -e

# Script configuration
SCRIPT_DIR=$(dirname "${BASH_SOURCE[0]}")
PARSER_SCRIPT="$SCRIPT_DIR/docker-compose-parser.sh"
ASSIGNMENT_SCRIPT="$SCRIPT_DIR/port-assignment.sh"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Source required scripts
if [ -f "$PARSER_SCRIPT" ]; then
    source "$PARSER_SCRIPT"
else
    echo -e "${RED}Error: Parser script not found: $PARSER_SCRIPT${NC}" >&2
    exit 1
fi

if [ -f "$ASSIGNMENT_SCRIPT" ]; then
    source "$ASSIGNMENT_SCRIPT"
else
    echo -e "${RED}Error: Assignment script not found: $ASSIGNMENT_SCRIPT${NC}" >&2
    exit 1
fi

# Find compose files in order of preference
find_compose_file() {
    local search_dir=${1:-.}
    
    local compose_files=(
        "$search_dir/compose.yml"
        "$search_dir/compose.yaml" 
        "$search_dir/docker-compose.yml"
        "$search_dir/docker-compose.yaml"
    )
    
    for compose_file in "${compose_files[@]}"; do
        if [ -f "$compose_file" ]; then
            echo "$compose_file"
            return 0
        fi
    done
    
    return 1
}

# Check if an override file is BranchBox-compatible
is_branchbox_override() {
    local override_file=$1
    
    if [ ! -f "$override_file" ]; then
        return 1
    fi
    
    # Check for BranchBox signature comments
    grep -q "Generated by BranchBox Port Doctor" "$override_file"
}

# Get current worktree name
get_current_worktree_name() {
    # Try to read from BranchBox marker file
    if [ -f ".branchbox-worktree" ]; then
        cat ".branchbox-worktree" 2>/dev/null
        return 0
    elif [ -f "../.branchbox-worktree" ]; then
        cat "../.branchbox-worktree" 2>/dev/null
        return 0
    fi
    
    # Fallback to directory name if in a worktree-like structure
    local current_dir=$(basename "$(pwd)")
    if [[ "$current_dir" != "main" ]] && [[ "$current_dir" =~ ^[a-zA-Z0-9_-]+$ ]]; then
        echo "$current_dir"
        return 0
    fi
    
    # Default fallback
    echo "main"
}

# Scan for port conflicts in a directory
scan_for_conflicts() {
    local search_dir=${1:-.}
    local compose_file=$(find_compose_file "$search_dir")
    
    if [ -z "$compose_file" ]; then
        return 1  # No compose file found
    fi
    
    if ! has_hardcoded_ports "$compose_file"; then
        return 1  # No hardcoded ports
    fi
    
    echo "$compose_file"
    return 0
}

# Report port conflicts found
report_conflicts() {
    local compose_file=$1
    local worktree_name=${2:-$(get_current_worktree_name)}
    
    echo -e "${YELLOW}Port conflicts detected in: $(basename "$compose_file")${NC}"
    echo ""
    
    local services=$(get_services_with_hardcoded_ports "$compose_file")
    local ports=$(parse_hardcoded_ports "$compose_file")
    
    echo "Services with hardcoded ports:"
    while IFS= read -r service; do
        echo "  - $service"
    done <<< "$services"
    
    echo ""
    echo "Hardcoded port mappings:"
    while IFS= read -r port_mapping; do
        local host_port=$(extract_host_port "$port_mapping")
        local container_port=$(extract_container_port "$port_mapping")
        local range=$(get_port_range_display "$host_port")
        echo "  - $host_port:$container_port ($range)"
    done <<< "$ports"
    
    echo ""
    echo "These ports will conflict when running multiple worktrees simultaneously."
}

# Create override file to resolve conflicts  
create_override() {
    local compose_file=$1
    local worktree_name=${2:-$(get_current_worktree_name)}
    local override_file="$(dirname "$compose_file")/docker-compose.override.yml"
    
    # Generate override content
    local override_content=$(generate_override_content "$worktree_name" "$compose_file")
    
    if [ -z "$override_content" ]; then
        echo -e "${YELLOW}No override needed - no port conflicts found${NC}"
        return 1
    fi
    
    # Create backup if override file already exists and is not BranchBox-generated
    if [ -f "$override_file" ] && ! is_branchbox_override "$override_file"; then
        local backup_file="${override_file}.backup-$(date +%Y%m%d-%H%M%S)"
        echo -e "${YELLOW}Backing up existing override file to: $(basename "$backup_file")${NC}"
        cp "$override_file" "$backup_file"
    fi
    
    # Write the override file
    echo "$override_content" > "$override_file"
    
    echo -e "${GREEN}✓ Created docker-compose.override.yml${NC}"
    echo ""
    
    # Show the port assignments
    preview_assignments "$worktree_name" "$compose_file"
    
    return 0
}

# Interactive mode - prompt user for action
interactive_mode() {
    local compose_file=$1
    local worktree_name=${2:-$(get_current_worktree_name)}
    local override_file="$(dirname "$compose_file")/docker-compose.override.yml"
    
    echo -e "${BLUE}BranchBox Port Doctor - Interactive Mode${NC}"
    echo "Worktree: $worktree_name"
    echo ""
    
    # Check if override already exists
    if [ -f "$override_file" ]; then
        if is_branchbox_override "$override_file"; then
            echo -e "${GREEN}✓ BranchBox override file already exists${NC}"
            echo ""
            echo "Current port assignments:"
            preview_assignments "$worktree_name" "$compose_file"
            echo ""
            
            read -p "Regenerate override file? (y/N) " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                echo -e "${BLUE}Keeping existing override file${NC}"
                return 0
            fi
        else
            echo -e "${YELLOW}Non-BranchBox override file exists: $(basename "$override_file")${NC}"
            echo "This will be backed up before creating new override."
            echo ""
        fi
    fi
    
    report_conflicts "$compose_file" "$worktree_name"
    echo ""
    
    # Show what would be generated
    echo -e "${BLUE}Proposed port assignments:${NC}"
    preview_assignments "$worktree_name" "$compose_file"
    echo ""
    
    read -p "Create docker-compose.override.yml to resolve conflicts? (Y/n) " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        echo -e "${YELLOW}Skipping override creation${NC}"
        echo ""
        echo "You can resolve port conflicts manually by:"
        echo "1. Using random ports (ports: \"8000\" instead of \"8000:8000\")"
        echo "2. Creating your own docker-compose.override.yml"
        echo "3. Running this command with --fix to auto-generate"
        return 1
    fi
    
    create_override "$compose_file" "$worktree_name"
}

# Usage information
usage() {
    local exit_code=${1:-1}
    echo "Usage: $(basename "$0") [OPTIONS] [directory]"
    echo ""
    echo "BranchBox Port Doctor - Automatically resolve Docker port conflicts between worktrees"
    echo ""
    echo "Options:"
    echo "  --fix, -f        Auto-fix conflicts by creating override files"
    echo "  --check, -c      Only check for conflicts, don't fix"
    echo "  --worktree NAME  Specify worktree name (auto-detected if not provided)"
    echo "  --help, -h       Show this help message"
    echo ""
    echo "Examples:"
    echo "  $(basename "$0")                    # Interactive mode in current directory"
    echo "  $(basename "$0") --check            # Check for conflicts without fixing"  
    echo "  $(basename "$0") --fix              # Auto-fix conflicts in current directory"
    echo "  $(basename "$0") /path/to/worktree  # Interactive mode in specific directory"
    echo "  $(basename "$0") --fix --worktree feature-auth  # Fix with explicit worktree name"
    echo ""
    exit "$exit_code"
}

# Main function
main() {
    local mode="interactive"
    local search_dir="."
    local worktree_name=""
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --fix|-f)
                mode="fix"
                shift
                ;;
            --check|-c)
                mode="check"
                shift
                ;;
            --worktree)
                worktree_name="$2"
                shift 2
                ;;
            --help|-h)
                usage 0
                ;;
            -*)
                echo -e "${RED}Error: Unknown option $1${NC}" >&2
                usage
                ;;
            *)
                search_dir="$1"
                shift
                ;;
        esac
    done
    
    # Validate directory
    if [ ! -d "$search_dir" ]; then
        echo -e "${RED}Error: Directory not found: $search_dir${NC}" >&2
        exit 1
    fi
    
    cd "$search_dir"
    
    # Auto-detect worktree name if not provided
    if [ -z "$worktree_name" ]; then
        worktree_name=$(get_current_worktree_name)
    fi
    
    # Scan for conflicts
    local compose_file=$(scan_for_conflicts ".")
    if [ -z "$compose_file" ]; then
        case "$mode" in
            check)
                echo -e "${GREEN}✓ No port conflicts detected${NC}"
                exit 0
                ;;
            *)
                echo -e "${GREEN}✓ No Docker Compose files with port conflicts found${NC}"
                echo ""
                echo "Your project is already configured to avoid port conflicts, or"
                echo "no Docker Compose files were found in this directory."
                exit 0
                ;;
        esac
    fi
    
    # Execute based on mode
    case "$mode" in
        check)
            report_conflicts "$compose_file" "$worktree_name"
            echo ""
            echo -e "${YELLOW}Run with --fix to automatically resolve these conflicts${NC}"
            exit 1
            ;;
        fix)
            if create_override "$compose_file" "$worktree_name"; then
                echo ""
                echo -e "${GREEN}✓ Port conflicts resolved!${NC}"
                echo ""
                echo "Next steps:"
                echo "  1. Restart your Docker services: docker compose down && docker compose up -d"
                echo "  2. Check running ports: docker compose ps"
            else
                echo -e "${RED}Failed to create override file${NC}"
                exit 1
            fi
            ;;
        interactive)
            interactive_mode "$compose_file" "$worktree_name"
            ;;
    esac
}

# Run main function if script is executed directly
if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    main "$@"
fi